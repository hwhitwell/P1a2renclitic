loops=1
#number of iterations
#Script
{
aucii=matrix(0,loops,5)
for(aucii_index in 1:loops){
threshold = (aucii_index-1)*d+st;
List_of_results <- parenclitic(data,result_folder,first_columns,number_of_parameters,column_of_case_control,case_number,control_number,contour_number,threshold,number_of_categoricals,number_of_indexes,Best_col,Second_col,grid_size,IndicesInModel,senstoset,TotalConnectionsPlot,Third_col,auc_case,bestmarker)
aucii[aucii_index,1]=List_of_results$thres
aucii[aucii_index,2]=List_of_results$auc
aucii[aucii_index,3]=List_of_results$specificity
aucii[aucii_index,4]=List_of_results$sensitivity
aucii[aucii_index,5]=List_of_results$formula
}
colnames(aucii) <- c("thres","auc","specificity","sensitivity","formula")
write.csv(aucii,file=paste(result_folder,"aucii.csv",sep=""),row.names=F)
}
}
source("Functions/functions.R")
#Variables to set and data
{
file_location <- "Data/"
#result_folder <- "20170615_Density/"
result_folder <- "temp/"
file_name <- "Synthetic_WeightBaseCaseControl.csv"
first_columns=4 #column number of first parameter -1
number_of_parameters=30 #Excluding categorical variables - these should be in columns at the end
column_of_case_control=1
case_number <- 1 #code for test cases.
control_number <- 0 #code for control cases
contour_number <- 2 #code for network controls
auc_case <- NA #Cases fro making the weights. This should be contour_number +1. NA = not using
number_of_categoricals <- 9
number_of_indexes <- 17
bestmarker <- c("X1","X2","X3") #names of top 3 single markers
Best_col <- 5 #Best marker
Second_col <- 6 #second best marker
Third_col <- 7 #third best marker
grid_size <- 16 #size of the density matrix grid (e.g. 10 = 10x10 grid)
IndicesInModel <- 1 #the number of indices to include in the model
senstoset <- 0.95 #Set the specificity for logistic regression testing.
TotalConnectionsPlot <- 1 #Plot graphs of total connections for each threshold (1=yes)
data=read.csv(paste(file_location,file_name,sep=""),na.strings=c("NA","#VALUE!",""))
data <- data[,-35] #Removing a categorical that was artificially set to 100% accuracy.
data <- data[which(data$V3==9),] #Use only samples closest to diagnosis.
#Examply code for imputing missing values using Amelia algorithm.
# #Impute Missing Values
# set.seed=123
#
# data_imp <- amelia(data[,(first_columns+1):ncol(data)],m=5)
# data_imp <- (data_imp$imputations$imp1+data_imp$imputations$imp2+
#                data_imp$imputations$imp3 +
#                data_imp$imputations$imp4 +
#                data_imp$imputations$imp5)/5
# data[,(first_columns+1):ncol(data)] <- data_imp
#
# #Generate Levels and Data sets
# data <- data[-which(data$Group=="BD Control"),];data <- droplevels(data)
# data$Group <- factor(data$Group,labels=c(1,0))
# data$Group <- as.numeric(as.character(data$Group))
# data$Group[sample(which(data$Group==0),340)] <- 2
# data$Group[sample(which(data$Group==1),20)] <- 3
}
#Program
{
st=0.5 #starting threshold
d=0.05 #increments
loops=1
#number of iterations
#Script
{
aucii=matrix(0,loops,5)
for(aucii_index in 1:loops){
threshold = (aucii_index-1)*d+st;
List_of_results <- parenclitic(data,result_folder,first_columns,number_of_parameters,column_of_case_control,case_number,control_number,contour_number,threshold,number_of_categoricals,number_of_indexes,Best_col,Second_col,grid_size,IndicesInModel,senstoset,TotalConnectionsPlot,Third_col,auc_case,bestmarker)
aucii[aucii_index,1]=List_of_results$thres
aucii[aucii_index,2]=List_of_results$auc
aucii[aucii_index,3]=List_of_results$specificity
aucii[aucii_index,4]=List_of_results$sensitivity
aucii[aucii_index,5]=List_of_results$formula
}
colnames(aucii) <- c("thres","auc","specificity","sensitivity","formula")
write.csv(aucii,file=paste(result_folder,"aucii.csv",sep=""),row.names=F)
}
}
#Program
{
st=0.5 #starting threshold
d=0.05 #increments
loops=2
#number of iterations
#Script
{
aucii=matrix(0,loops,5)
for(aucii_index in 1:loops){
threshold = (aucii_index-1)*d+st;
List_of_results <- parenclitic(data,result_folder,first_columns,number_of_parameters,column_of_case_control,case_number,control_number,contour_number,threshold,number_of_categoricals,number_of_indexes,Best_col,Second_col,grid_size,IndicesInModel,senstoset,TotalConnectionsPlot,Third_col,auc_case,bestmarker)
aucii[aucii_index,1]=List_of_results$thres
aucii[aucii_index,2]=List_of_results$auc
aucii[aucii_index,3]=List_of_results$specificity
aucii[aucii_index,4]=List_of_results$sensitivity
aucii[aucii_index,5]=List_of_results$formula
}
colnames(aucii) <- c("thres","auc","specificity","sensitivity","formula")
write.csv(aucii,file=paste(result_folder,"aucii.csv",sep=""),row.names=F)
}
}
#AUC and Sensitivity Graph
{
data_thres_auc <- read.csv(paste(result_folder,"aucii.csv",sep=""))
sens <- ggplot(data_thres_auc, aes(x=thres, y=sensitivity)) +
geom_point(shape=1, size=2, colour="red") +
xlab("Threshold") +
ylab("Sensitivity") +
ggtitle("PC Controls \n Late cases") +
theme(title=element_text(size=8))
auc <- ggplot(data_thres_auc, aes(x=thres, y=auc)) +
geom_point(shape=1, size=2, colour="red") +
xlab("Threshold") +
ylab("AUC") +
ggtitle("PC Controls \n Late cases") +
theme(title=element_text(size=8))
plot_grid(sens,auc)
ggsave(paste(result_folder,"Sens_AUC.png",sep=""),width=8,height=3)
}
levels(as.factor(data[,1]))
#Variables to set and data
{
file_location <- "Data/"
#result_folder <- "20170615_Density/"
result_folder <- "temp_W/"
file_name <- "Synthetic_WeightBaseCaseControl.csv"
first_columns=4 #column number of first parameter -1
number_of_parameters=30 #Excluding categorical variables - these should be in columns at the end
column_of_case_control=1
case_number <- 1 #code for test cases.
control_number <- 0 #code for control cases
contour_number <- 2 #code for network controls
auc_case <- 3 #Cases fro making the weights. This should be contour_number +1. NA = not using
number_of_categoricals <- 9
number_of_indexes <- 17
bestmarker <- c("X1","X2","X3") #names of top 3 single markers
Best_col <- 5 #Best marker
Second_col <- 6 #second best marker
Third_col <- 7 #third best marker
grid_size <- 16 #size of the density matrix grid (e.g. 10 = 10x10 grid)
IndicesInModel <- 1 #the number of indices to include in the model
senstoset <- 0.95 #Set the specificity for logistic regression testing.
TotalConnectionsPlot <- 1 #Plot graphs of total connections for each threshold (1=yes)
data=read.csv(paste(file_location,file_name,sep=""),na.strings=c("NA","#VALUE!",""))
data <- data[,-35] #Removing a categorical that was artificially set to 100% accuracy.
data <- data[which(data$V3==9),] #Use only samples closest to diagnosis.
#Examply code for imputing missing values using Amelia algorithm.
# #Impute Missing Values
# set.seed=123
#
# data_imp <- amelia(data[,(first_columns+1):ncol(data)],m=5)
# data_imp <- (data_imp$imputations$imp1+data_imp$imputations$imp2+
#                data_imp$imputations$imp3 +
#                data_imp$imputations$imp4 +
#                data_imp$imputations$imp5)/5
# data[,(first_columns+1):ncol(data)] <- data_imp
#
# #Generate Levels and Data sets
# data <- data[-which(data$Group=="BD Control"),];data <- droplevels(data)
# data$Group <- factor(data$Group,labels=c(1,0))
# data$Group <- as.numeric(as.character(data$Group))
# data$Group[sample(which(data$Group==0),340)] <- 2
# data$Group[sample(which(data$Group==1),20)] <- 3
}
#Program
{
st=0.5 #starting threshold
d=0.05 #increments
loops=2
#number of iterations
#Script
{
aucii=matrix(0,loops,5)
for(aucii_index in 1:loops){
threshold = (aucii_index-1)*d+st;
List_of_results <- parenclitic(data,result_folder,first_columns,number_of_parameters,column_of_case_control,case_number,control_number,contour_number,threshold,number_of_categoricals,number_of_indexes,Best_col,Second_col,grid_size,IndicesInModel,senstoset,TotalConnectionsPlot,Third_col,auc_case,bestmarker)
aucii[aucii_index,1]=List_of_results$thres
aucii[aucii_index,2]=List_of_results$auc
aucii[aucii_index,3]=List_of_results$specificity
aucii[aucii_index,4]=List_of_results$sensitivity
aucii[aucii_index,5]=List_of_results$formula
}
colnames(aucii) <- c("thres","auc","specificity","sensitivity","formula")
write.csv(aucii,file=paste(result_folder,"aucii.csv",sep=""),row.names=F)
}
}
#AUC and Sensitivity Graph
{
data_thres_auc <- read.csv(paste(result_folder,"aucii.csv",sep=""))
sens <- ggplot(data_thres_auc, aes(x=thres, y=sensitivity)) +
geom_point(shape=1, size=2, colour="red") +
xlab("Threshold") +
ylab("Sensitivity") +
ggtitle("PC Controls \n Late cases") +
theme(title=element_text(size=8))
auc <- ggplot(data_thres_auc, aes(x=thres, y=auc)) +
geom_point(shape=1, size=2, colour="red") +
xlab("Threshold") +
ylab("AUC") +
ggtitle("PC Controls \n Late cases") +
theme(title=element_text(size=8))
plot_grid(sens,auc)
ggsave(paste(result_folder,"Sens_AUC.png",sep=""),width=8,height=3)
}
#Variables to set and data
{
file_location <- "Data/"
result_folder <- "20170615_Density/"
file_name <- "Synthetic_WeightBaseCaseControl.csv"
first_columns=4 #column number of first parameter -1
number_of_parameters=30 #Excluding categorical variables - these should be in columns at the end
column_of_case_control=1
case_number <- 1 #code for test cases.
control_number <- 0 #code for control cases
contour_number <- 2 #code for network controls
auc_case <- 3 #Cases fro making the weights. This should be contour_number +1. NA = not using
number_of_categoricals <- 9
number_of_indexes <- 17
bestmarker <- c("X1","X2","X3") #names of top 3 single markers
Best_col <- 5 #Best marker
Second_col <- 6 #second best marker
Third_col <- 7 #third best marker
grid_size <- 16 #size of the density matrix grid (e.g. 10 = 10x10 grid)
IndicesInModel <- 1 #the number of indices to include in the model
senstoset <- 0.95 #Set the specificity for logistic regression testing.
TotalConnectionsPlot <- 1 #Plot graphs of total connections for each threshold (1=yes)
data=read.csv(paste(file_location,file_name,sep=""),na.strings=c("NA","#VALUE!",""))
data <- data[,-35] #Removing a categorical that was artificially set to 100% accuracy.
data <- data[which(data$V3==9),] #Use only samples closest to diagnosis.
#Examply code for imputing missing values using Amelia algorithm.
# #Impute Missing Values
# set.seed=123
#
# data_imp <- amelia(data[,(first_columns+1):ncol(data)],m=5)
# data_imp <- (data_imp$imputations$imp1+data_imp$imputations$imp2+
#                data_imp$imputations$imp3 +
#                data_imp$imputations$imp4 +
#                data_imp$imputations$imp5)/5
# data[,(first_columns+1):ncol(data)] <- data_imp
#
# #Generate Levels and Data sets
# data <- data[-which(data$Group=="BD Control"),];data <- droplevels(data)
# data$Group <- factor(data$Group,labels=c(1,0))
# data$Group <- as.numeric(as.character(data$Group))
# data$Group[sample(which(data$Group==0),340)] <- 2
# data$Group[sample(which(data$Group==1),20)] <- 3
}
i=1
j=2
samples <- subset(data,data[,column_of_case_control]==control_number|data[,column_of_case_control]==case_number)
base_controls <- subset(data,data[column_of_case_control]==contour_number)
bandwidth <- Hpi(base_controls[,c(first_columns+i,first_columns+j)],bgridsize=grid_size)
#Packages
{
library(MASS)
library(igraph)
library(lubridate)
library(plotrix)
library(ROCR)
library(Hmisc)
library(pROC)
library(ggplot2)
library(cowplot)
library(emdbook)
library(compiler)
library(reshape)
library(Amelia)
library(ks) # this is for bandwidth selection during 2DKDE
}
bandwidth <- Hpi(base_controls[,c(first_columns+i,first_columns+j)],bgridsize=grid_size)
bandwidth
Hpi(base_controls[,(first_columns+1)],bgridsize=grid_size)
Hpi(base_controls[,(first_columns+i)],bgridsize=grid_size)
?Hpi
Hpi(base_controls[,(first_columns+i)])
?bandwidth.rnd
?bandwidth
?bandwidth.nrd
bandwidth.nrd(base_controls[,c(first_columns+i,first_columns+j)])
bandwidth.nrd(base_controls[,c(first_columns+i)])
?Hdi
>Hpi
?Hpi
first_columns
Hpi(base_controls[,5])
Hpi(base_controls[,6])
base_controls[,5]
Hpi(base_controls[,5],binned=T)
Hpi(base_controls[,5],d=1)
Hpi(base_controls[,c(5,6)])
Hpi(base_controls[,5],pilot="dscalar")
Hpi(base_controls[,5],pilot="amse")
Hpi(base_controls[,5],pilot="samse")
Hpi(base_controls[,5])
Hbcv(base_controls[,c(5,6)])
?kde2s
?kde2d
Hlscv(base_controls[,c(5,6)])
Hlscv(base_controls[,c(5)])
Hlscv(base_controls[,c(6)])
Hlscv
Hlscv(base_controls[,c(5,6)])
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)],bdgridsize=grid_size),
Hlscv(base_controls[,(first_columns+j)],bdgridsize=grid_size))
contour_matrix[[1]][[i]][[j]] <- kde2d(base_controls[,first_columns+i],base_controls[,first_columns+j], h=bandwidth, n=grid_size)
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)],bdgridsize=grid_size),
Hlscv(base_controls[,(first_columns+j)],bdgridsize=grid_size))
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)],bgridsize=grid_size),
Hlscv(base_controls[,(first_columns+j)],bgridsize=grid_size))
bandwidth
for(i in 1:number_of_parameters){
for(j in 1:number_of_parameters){
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)],bgridsize=grid_size),
Hlscv(base_controls[,(first_columns+j)],bgridsize=grid_size))
contour_matrix[[1]][[i]][[j]] <- kde2d(base_controls[,first_columns+i],base_controls[,first_columns+j], h=bandwidth, n=grid_size)
}
}
contour_matrix <- list(0)
contour_matrix <- list(replicate(number_of_parameters,contour_matrix))
contour_matrix <- list(replicate(number_of_parameters,contour_matrix))
for(i in 1:number_of_parameters){
for(j in 1:number_of_parameters){
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)],bgridsize=grid_size),
Hlscv(base_controls[,(first_columns+j)],bgridsize=grid_size))
contour_matrix[[1]][[i]][[j]] <- kde2d(base_controls[,first_columns+i],base_controls[,first_columns+j], h=bandwidth, n=grid_size)
}
}
i
j
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)],bgridsize=grid_size),
Hlscv(base_controls[,(first_columns+j)],bgridsize=grid_size))
bandwidth
plot(base_controls[,c(5,6)])
contour(contour_matrix[[1]][[1]][[2]])
plot(base_controls[,c(5,6)])
plot(base_controls[,c(5,6)],add=T)
contour(contour_matrix[[1]][[1]][[2]],add=T)
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)]),
Hlscv(base_controls[,(first_columns+j)]))
bandwidth
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)]),
Hlscv(base_controls[,(first_columns+j)]),bgridsize=grid_size)
bandwidth
i
j
first_columns
plot(base_controls[,c(i,j)])
countour(contour_matrix[[1]][[i]][[j]],add=T)
contour(contour_matrix[[1]][[i]][[j]],add=T)
contour_matrix[[1]][[i]][[j]]
contour_matrix[[1]][[i]][[j-1]]
plot(base_controls[,c(i,j-1)])
contour(contour_matrix[[1]][[i]][[j-1]],add=T)
for(i in 1:number_of_parameters){
for(j in 1:number_of_parameters){
bandwidth <- c(Hlscv(base_controls[,(first_columns+i)]),
Hlscv(base_controls[,(first_columns+j)]))
contour_matrix[[1]][[i]][[j]] <- kde2d(base_controls[,first_columns+i],base_controls[,first_columns+j], h=bandwidth, n=grid_size)
}
}
?apply
i
j
bandwidth <- apply(base_controls[,c(first_columns+i,first_columns+j)],2,function(x)1.06*sd(x)*(length(x)^(1/5)))
bandwidth
x = first_columns+i
sd(x)
x
x=base_controls[,first_columns+i]
x
sd(x)
x*1.06
x <- sd(x)
x <- x*1.06
x
110^(1/5)
2.560227^5
x*(110^(1/5))
bandwidth
x <- base_controls[,c(fist_columns+i)]
x <- base_controls[,c(first_columns+i)]
x
1.06*sd(x)*length(x)^(1/5)
1.06*sd(x)*(length(x)^(1/5))
bandwidth
for(i in 1:number_of_parameters){
for(j in 1:number_of_parameters){
#bandwidth <- c(Hlscv(base_controls[,(first_columns+i)]),
#Hlscv(base_controls[,(first_columns+j)]))
bandwidth <- apply(base_controls[,c(first_columns+i,first_columns+j)],2,function(x)1.06*sd(x)*(length(x)^(1/5)))
contour_matrix[[1]][[i]][[j]] <- kde2d(base_controls[,first_columns+i],base_controls[,first_columns+j], h=bandwidth, n=grid_size)
}
}
plot(base_controls[,c(first_columns+1,first_columns+2)])
contour(contour_matrix[[1]][[1]][[2]],add=T)
source("Functions/functions.R")
#Variables to set and data
{
file_location <- "Data/"
result_folder <- "20170615_Density/"
file_name <- "Synthetic_WeightBaseCaseControl.csv"
first_columns=4 #column number of first parameter -1
number_of_parameters=30 #Excluding categorical variables - these should be in columns at the end
column_of_case_control=1
case_number <- 1 #code for test cases.
control_number <- 0 #code for control cases
contour_number <- 2 #code for network controls
auc_case <- 3 #Cases fro making the weights. This should be contour_number +1. NA = not using
number_of_categoricals <- 9
number_of_indexes <- 17
bestmarker <- c("X1","X2","X3") #names of top 3 single markers
Best_col <- 5 #Best marker
Second_col <- 6 #second best marker
Third_col <- 7 #third best marker
grid_size <- 16 #size of the density matrix grid (e.g. 10 = 10x10 grid)
IndicesInModel <- 1 #the number of indices to include in the model
senstoset <- 0.95 #Set the specificity for logistic regression testing.
TotalConnectionsPlot <- 1 #Plot graphs of total connections for each threshold (1=yes)
data=read.csv(paste(file_location,file_name,sep=""),na.strings=c("NA","#VALUE!",""))
data <- data[,-35] #Removing a categorical that was artificially set to 100% accuracy.
data <- data[which(data$V3==9),] #Use only samples closest to diagnosis.
#Examply code for imputing missing values using Amelia algorithm.
# #Impute Missing Values
# set.seed=123
#
# data_imp <- amelia(data[,(first_columns+1):ncol(data)],m=5)
# data_imp <- (data_imp$imputations$imp1+data_imp$imputations$imp2+
#                data_imp$imputations$imp3 +
#                data_imp$imputations$imp4 +
#                data_imp$imputations$imp5)/5
# data[,(first_columns+1):ncol(data)] <- data_imp
#
# #Generate Levels and Data sets
# data <- data[-which(data$Group=="BD Control"),];data <- droplevels(data)
# data$Group <- factor(data$Group,labels=c(1,0))
# data$Group <- as.numeric(as.character(data$Group))
# data$Group[sample(which(data$Group==0),340)] <- 2
# data$Group[sample(which(data$Group==1),20)] <- 3
}
#Variables to set and data
{
file_location <- "Data/"
#result_folder <- "20170615_Density/"
results_folder <- "temp/"
file_name <- "Synthetic_WeightBaseCaseControl.csv"
first_columns=4 #column number of first parameter -1
number_of_parameters=30 #Excluding categorical variables - these should be in columns at the end
column_of_case_control=1
case_number <- 1 #code for test cases.
control_number <- 0 #code for control cases
contour_number <- 2 #code for network controls
auc_case <- 3 #Cases fro making the weights. This should be contour_number +1. NA = not using
number_of_categoricals <- 9
number_of_indexes <- 17
bestmarker <- c("X1","X2","X3") #names of top 3 single markers
Best_col <- 5 #Best marker
Second_col <- 6 #second best marker
Third_col <- 7 #third best marker
grid_size <- 16 #size of the density matrix grid (e.g. 10 = 10x10 grid)
IndicesInModel <- 1 #the number of indices to include in the model
senstoset <- 0.95 #Set the specificity for logistic regression testing.
TotalConnectionsPlot <- 1 #Plot graphs of total connections for each threshold (1=yes)
data=read.csv(paste(file_location,file_name,sep=""),na.strings=c("NA","#VALUE!",""))
data <- data[,-35] #Removing a categorical that was artificially set to 100% accuracy.
data <- data[which(data$V3==9),] #Use only samples closest to diagnosis.
#Examply code for imputing missing values using Amelia algorithm.
# #Impute Missing Values
# set.seed=123
#
# data_imp <- amelia(data[,(first_columns+1):ncol(data)],m=5)
# data_imp <- (data_imp$imputations$imp1+data_imp$imputations$imp2+
#                data_imp$imputations$imp3 +
#                data_imp$imputations$imp4 +
#                data_imp$imputations$imp5)/5
# data[,(first_columns+1):ncol(data)] <- data_imp
#
# #Generate Levels and Data sets
# data <- data[-which(data$Group=="BD Control"),];data <- droplevels(data)
# data$Group <- factor(data$Group,labels=c(1,0))
# data$Group <- as.numeric(as.character(data$Group))
# data$Group[sample(which(data$Group==0),340)] <- 2
# data$Group[sample(which(data$Group==1),20)] <- 3
}
#Program
{
st=0.5 #starting threshold
d=0.05 #increments
loops=1
#number of iterations
#Script
{
aucii=matrix(0,loops,5)
for(aucii_index in 1:loops){
threshold = (aucii_index-1)*d+st;
List_of_results <- parenclitic(data,result_folder,first_columns,number_of_parameters,column_of_case_control,case_number,control_number,contour_number,threshold,number_of_categoricals,number_of_indexes,Best_col,Second_col,grid_size,IndicesInModel,senstoset,TotalConnectionsPlot,Third_col,auc_case,bestmarker)
aucii[aucii_index,1]=List_of_results$thres
aucii[aucii_index,2]=List_of_results$auc
aucii[aucii_index,3]=List_of_results$specificity
aucii[aucii_index,4]=List_of_results$sensitivity
aucii[aucii_index,5]=List_of_results$formula
}
colnames(aucii) <- c("thres","auc","specificity","sensitivity","formula")
write.csv(aucii,file=paste(result_folder,"aucii.csv",sep=""),row.names=F)
}
}
getwd()
